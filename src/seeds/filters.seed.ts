import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Characteristic } from '../characteristics/entities/characteristic.entity';

@Injectable()
export class FiltersSeedService {
  constructor(
    @InjectRepository(Characteristic)
    private characteristicRepository: Repository<Characteristic>,
  ) {}

  async seed(): Promise<void> {
    console.log('üîç Iniciando seed de caracter√≠sticas...');

    // Verificar si ya existen caracter√≠sticas
    const existingCharacteristics = await this.characteristicRepository.count();
    if (existingCharacteristics > 0) {
      console.log(
        '‚ö†Ô∏è Ya existen caracter√≠sticas en la base de datos. Saltando seed...',
      );
      return;
    }

    // Crear caracter√≠sticas b√°sicas necesarias para los veh√≠culos
    const basicCharacteristics = [
      // Caracter√≠sticas t√©cnicas (IDs 1-36)
      {
        id: 1,
        name: 'Potencia',
        data_type: 'number',
        unit: 'hp',
        description: 'Potencia del motor en caballos de fuerza',
      },
      {
        id: 2,
        name: 'Torque',
        data_type: 'number',
        unit: 'Nm',
        description: 'Torque del motor en Newton-metro',
      },
      {
        id: 3,
        name: 'Aceleraci√≥n 0-100',
        data_type: 'number',
        unit: 's',
        description: 'Tiempo de aceleraci√≥n de 0 a 100 km/h',
      },
      {
        id: 4,
        name: 'Velocidad M√°xima',
        data_type: 'number',
        unit: 'km/h',
        description: 'Velocidad m√°xima del veh√≠culo',
      },
      {
        id: 5,
        name: 'Consumo Ciudad',
        data_type: 'number',
        unit: 'L/100km',
        description: 'Consumo de combustible en ciudad',
      },
      {
        id: 6,
        name: 'Consumo Carretera',
        data_type: 'number',
        unit: 'L/100km',
        description: 'Consumo de combustible en carretera',
      },
      {
        id: 7,
        name: 'Capacidad Tanque',
        data_type: 'number',
        unit: 'L',
        description: 'Capacidad del tanque de combustible',
      },
      {
        id: 8,
        name: 'Emisiones CO2',
        data_type: 'number',
        unit: 'g/km',
        description: 'Emisiones de di√≥xido de carbono',
      },
      {
        id: 9,
        name: 'Longitud',
        data_type: 'number',
        unit: 'mm',
        description: 'Longitud total del veh√≠culo',
      },
      {
        id: 10,
        name: 'Ancho',
        data_type: 'number',
        unit: 'mm',
        description: 'Ancho total del veh√≠culo',
      },
      {
        id: 11,
        name: 'Altura',
        data_type: 'number',
        unit: 'mm',
        description: 'Altura total del veh√≠culo',
      },
      {
        id: 12,
        name: 'Peso',
        data_type: 'number',
        unit: 'kg',
        description: 'Peso del veh√≠culo en vac√≠o',
      },
      {
        id: 13,
        name: 'Capacidad de Carga',
        data_type: 'number',
        unit: 'L',
        description: 'Capacidad del maletero o √°rea de carga',
      },
      {
        id: 14,
        name: 'Altura al Suelo',
        data_type: 'number',
        unit: 'mm',
        description: 'Distancia m√≠nima al suelo',
      },
      {
        id: 15,
        name: 'Aire Acondicionado',
        data_type: 'boolean',
        description: 'Sistema de aire acondicionado',
      },
      {
        id: 16,
        name: 'GPS',
        data_type: 'boolean',
        description: 'Sistema de navegaci√≥n GPS',
      },
      {
        id: 17,
        name: 'C√°mara de Reversa',
        data_type: 'boolean',
        description: 'C√°mara trasera para reversa',
      },
      {
        id: 18,
        name: 'Sensores de Parking',
        data_type: 'boolean',
        description: 'Sensores de aparcamiento',
      },
      {
        id: 19,
        name: 'Asientos de Cuero',
        data_type: 'boolean',
        description: 'Tapicer√≠a de cuero',
      },
      {
        id: 20,
        name: 'Volante Multifunci√≥n',
        data_type: 'boolean',
        description: 'Volante con controles integrados',
      },
      {
        id: 21,
        name: 'Control de Crucero',
        data_type: 'boolean',
        description: 'Sistema de control de crucero',
      },
      {
        id: 22,
        name: 'Bluetooth',
        data_type: 'boolean',
        description: 'Conectividad inal√°mbrica Bluetooth',
      },
      {
        id: 23,
        name: 'Puertos USB',
        data_type: 'boolean',
        description: 'Puertos USB para carga y datos',
      },
      {
        id: 24,
        name: 'Sistema ABS',
        data_type: 'boolean',
        description: 'Sistema antibloqueo de frenos',
      },
      {
        id: 25,
        name: 'Airbags',
        data_type: 'number',
        description: 'N√∫mero total de airbags',
      },
      {
        id: 26,
        name: 'EBD',
        data_type: 'boolean',
        description: 'Distribuci√≥n electr√≥nica de frenado',
      },
      {
        id: 27,
        name: 'Tipo de Tracci√≥n',
        data_type: 'text',
        description: 'Sistema de tracci√≥n del veh√≠culo',
      },
      {
        id: 28,
        name: 'Control de Estabilidad',
        data_type: 'boolean',
        description: 'Sistema de control de estabilidad',
      },
      {
        id: 29,
        name: 'Sistema de Alarma',
        data_type: 'boolean',
        description: 'Sistema de seguridad y alarma',
      },
      {
        id: 30,
        name: 'Radio',
        data_type: 'boolean',
        description: 'Sistema de radio AM/FM',
      },
      {
        id: 31,
        name: 'Pantalla Multimedia',
        data_type: 'number',
        unit: '"',
        description: 'Tama√±o de pantalla del sistema multimedia',
      },
      {
        id: 32,
        name: 'Apple CarPlay',
        data_type: 'boolean',
        description: 'Compatibilidad con Apple CarPlay',
      },
      {
        id: 33,
        name: 'Android Auto',
        data_type: 'boolean',
        description: 'Compatibilidad con Android Auto',
      },
      {
        id: 34,
        name: 'Carga Inal√°mbrica',
        data_type: 'boolean',
        description: 'Cargador inal√°mbrico para dispositivos',
      },
      {
        id: 35,
        name: 'Techo Solar',
        data_type: 'boolean',
        description: 'Techo corredizo o panor√°mico',
      },
      {
        id: 36,
        name: 'Luces LED',
        data_type: 'boolean',
        description: 'Iluminaci√≥n LED (faros y/o interiores)',
      },

      // Caracter√≠sticas principales del veh√≠culo (IDs 37-43)
      {
        id: 37,
        name: 'A√±o',
        data_type: 'number',
        description: 'A√±o de fabricaci√≥n del veh√≠culo',
      },
      {
        id: 38,
        name: 'Precio',
        data_type: 'number',
        unit: 'USD',
        description: 'Precio de venta del veh√≠culo',
      },
      {
        id: 39,
        name: 'Combustible',
        data_type: 'text',
        description: 'Tipo de combustible o energ√≠a',
      },
      {
        id: 40,
        name: 'Transmisi√≥n',
        data_type: 'text',
        description: 'Tipo de caja de cambios',
      },
      {
        id: 41,
        name: 'Asientos',
        data_type: 'number',
        description: 'N√∫mero total de asientos',
      },
      {
        id: 42,
        name: 'Puertas',
        data_type: 'number',
        description: 'N√∫mero de puertas del veh√≠culo',
      },
      {
        id: 43,
        name: 'Carrocer√≠a',
        data_type: 'text',
        description: 'Tipo de carrocer√≠a del veh√≠culo',
      },
    ];
    let characteristicCount = 0;

    for (const charData of basicCharacteristics) {
      try {
        // Crear characteristic con ID espec√≠fico
        const characteristic = await this.characteristicRepository.save({
          id: charData.id,
          name: charData.name,
          data_type: charData.data_type,
          unit: charData.unit || undefined,
          description: charData.description,
        });

        characteristicCount++;
        console.log(
          `‚úÖ Creada caracter√≠stica: ${charData.name} (ID: ${characteristic.id})`,
        );
      } catch (error) {
        console.error(
          `‚ùå Error creando caracter√≠stica ${charData.name}:`,
          error,
        );
      }
    }

    console.log(
      `üéâ Seed de caracter√≠sticas completado: ${characteristicCount} caracter√≠sticas creadas`,
    );
  }
}
